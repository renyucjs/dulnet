# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

template("toolchain_gcc_like") {
  toolchain(target_name) {
# cpu = invoker.cpu
# os = invoker.os
    ar = invoker.ar
    cc = invoker.cc
    cxx = invoker.cxx
    rm = invoker.rm
    touch = invoker.touch
    cp = invoker.cp

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("alink") {
      command = "$rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
      description = "AR {{target_output_name}}{{output_extension}}"

      outputs =
          [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"
      rspfile = soname + ".rsp"
      if (is_mac) {
        os_specific_option = "-install_name @executable_path/$sofile"
        rspfile_content = "{{inputs}} {{solibs}} {{libs}}"
      } else {
        os_specific_option = "-Wl,-soname=$soname"
        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"
      }

      command = "$cxx -shared {{ldflags}} -o $sofile $os_specific_option @$rspfile"

      description = "SOLINK $soname"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      default_output_extension = ".so"

      # Use this for {{output_dir}} expansions unless a target manually overrides
      # it (in which case {{output_dir}} will be what the target specifies).
      default_output_dir = "{{root_out_dir}}"

      outputs = [ sofile ]
      link_output = sofile
      depend_output = sofile
      output_prefix = "lib"
    }

    tool("link") {
      outfile = "{{target_output_name}}{{output_extension}}"
      rspfile = "$outfile.rsp"
      if (is_mac) {
        command = "$cxx {{ldflags}} -o $outfile @$rspfile {{solibs}} {{libs}}"
      } else {
        command = "$cxx {{ldflags}} -o $outfile -Wl,--start-group @$rspfile {{solibs}} -Wl,--end-group {{libs}}"
      }
      description = "LINK $outfile"
      default_output_dir = "{{root_out_dir}}"
      rspfile_content = "{{inputs}}"
      outputs = [ outfile ]
    }

    tool("stamp") {
      command = "$touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command = "$cp -af {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }
  }
}


toolchain_gcc_like("default-gcc")
{
  if(host_os == "linux")
  {
    rm = "rm"
    touch = "touch"
    cp = "cp"
  }
  else if(host_os == "win")
  {
    rm = "del"
    touch = "echo >"
    cp = "copy"
  }

  if(current_cpu == "x86" || current_cpu == "x64")
  {
    ar = "ar"
    cc = "gcc"
    cxx = "g++"
  }
  else if(current_cpu == "ssd201")
  {
    ar = "arm-linux-gnueabihf-gcc-ar"
    cc = "arm-linux-gnueabihf-gcc"
    cxx = "arm-linux-gnueabihf-g++"
  }
}

toolchain_gcc_like("host-gcc")
{
  # cpu = host_cpu
  # os = host_os
  if(host_os == "linux")
  {
    ar = "ar"
    cc = "gcc"
    cxx = "g++"
    rm = "rm"
    touch = "touch"
    cp = "cp"
  }else if(host_os == "win")
  {
    ar = "ar"
    cc = "gcc"
    cxx = "g++"
    rm = "del"
    touch = "echo >"
    cp = "copy"
  }
}

